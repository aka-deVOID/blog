import { StyleMetrics , Button, HorizontalBox} from "std-widgets.slint";
import { Palette } from "colors.slint";

component SideBarItem inherits Rectangle {
    callback clicked <=> touch.clicked;
    in-out property<string> text <=> label.text;
    in property<bool> selected;
    in property<bool> has-focus;

    min-height: l.preferred-height;

    state := Rectangle {
        opacity: 0;
        background: Palette.middle-blue;

        animate opacity { duration: 200ms; }
    }

    l := HorizontalLayout {
        y: (parent.height - self.height) / 2;
        padding: StyleMetrics.layout-padding;
        spacing: 0px;

        label := Text {
            color: Palette.text;
            vertical-alignment: center;
        }
    }

    touch := TouchArea {
        width: 100%;
        height: 100%;
    }

    states [
        pressed when touch.pressed : {
            state.opacity: 0.8;
        }
        hover when touch.has-hover : {
            state.opacity: 0.6;
        }
        selected when root.selected : {
            state.opacity: 1;
        }
        focused when root.has-focus : {
            state.color: Palette.middle-blue;
        }
    ]
}

export component SideBar inherits Rectangle {
    in property<[string]> model: [];
    out property<int> current-item: 0;
    out property<int> current-focused: fs.has-focus ? fs.focused-tab : -1;

    width: 180px;
    forward-focus: fs;
    accessible-role: tab;
    accessible-delegate-focus: root.current-focused >= 0 ? root.current-focused : root.current-item;

    Rectangle {
        background: Palette.background.darker(0.5);

        fs := FocusScope {
            x:0;
            width: 0px;
            property<int> focused-tab: 0;

            key-pressed(event) => {
                if (event.text == "\n") {
                     root.current-item = root.current-focused;
                     return accept;
                }
                if (event.text == Key.UpArrow) {
                     self.focused-tab = Math.max(self.focused-tab - 1,  0);
                     return accept;
                }
                if (event.text == Key.DownArrow) {
                     self.focused-tab = Math.min(self.focused-tab + 1, root.model.length - 1);
                     return accept;
                }
                return reject;
            }

            key-released(event) => {
                if (event.text == " ") {
                    root.current-item = root.current-focused;
                    return accept;
                }
                return reject;
            }
        }
    }

    VerticalLayout {
        padding-top: StyleMetrics.layout-padding;
        padding-bottom: StyleMetrics.layout-padding;
        spacing: StyleMetrics.layout-spacing;
        alignment: start;

        HorizontalBox {
            alignment: end;
            Rectangle {
                img := Image {
                    colorize: Palette.middle-blue;
                    source: @image-url("../assets/arrow.png");
                    width: 20px;
                    height: 20px;
                }
                width: 40px;
                height: 30px;
                btm := TouchArea {
                    width: img.width;
                    height: img.height;
                }
                background: btm.pressed ? blue: red;
            }
            padding-bottom: 0px;
            padding-top: 0px;
        }

        navigation := VerticalLayout {
            alignment: start;
            vertical-stretch: 0;
            for item[index] in root.model : SideBarItem {
                has-focus: index == root.current-focused;
                text: item;
                selected: index == root.current-item;
                clicked => { root.current-item = index; }
            }
        }

        VerticalLayout {
            bottom := VerticalLayout {
                padding-left: StyleMetrics.layout-padding;
                padding-right: StyleMetrics.layout-padding;

                @children
            }
        }
    }
}
